module.exports = {
    main_cpp: `//INCLUDES\n#include "main.h"\n\n//Window input\nLRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam) {\n    //Incoming messages go to this switch\n    switch (Message) {\n        case WM_CREATE: { // #define WM_CREATE 0x0001 //Window Create\n            \n            CreateWindow(TEXT("STATIC"), TEXT("Text Box"),\n                WS_VISIBLE | WS_CHILD,\n                20, //x\n                5,  //y\n                100, //width\n                20, //height\n                hwnd, //parent window\n                (HMENU) NULL, //MENU\n                NULL, //Instance\n                NULL); //lpParam\n            \n            CreateWindow(TEXT("BUTTON"), TEXT("Button"),\n                WS_VISIBLE | WS_CHILD,\n                620, 360, 150, 40,\n                hwnd, (HMENU) ID_BUTTON, NULL, NULL\n            );\n\n            break;\n        }\n\n        case WM_COMMAND: { // #define WM_COMMAND 0x0111 //Window Command\n            if (LOWORD(wParam) == ID_BUTTON) {\n                MessageBox(NULL, "Filler", "It's the Filler!", MB_ICONEXCLAMATION | MB_OK);\n\n                std::cout << "Button Pressed" << std::endl;\n            }\n\n            break;\n        }\n\n        case WM_DESTROY: { // #define WM_DESTROY 0x0002 //Window Destroy\n            PostQuitMessage(0);\n            break;\n        }\n\n        //Every other message goes here, and there is a lot\n        default:\n            return DefWindowProc(hwnd, Message, wParam, lParam);\n    }\n    return 0;\n}\n\n// The "Main" function for win32/winApi programs\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n    WNDCLASSEX wc; // Properties struct for the window\n    HWND hwnd;    //  The window handle\n    MSG msg;     //   Temporary location for messages\n\n    //Zero out the struct and set the stuff we want to modify\n    memset(&wc, 0, sizeof(wc));\n    wc.cbSize          = sizeof(WNDCLASSEX);\n    wc.lpfnWndProc     = WndProc;        //All the messages get sent here\n    wc.hInstance       = hInstance;\n    wc.hCursor         = LoadCursor(NULL, IDC_ARROW); //Default Mouse cursor\n    \n    //COLOR_WINDOW is a define for a system color, line 9555 in WinUser.h\n    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);\n    wc.lpszClassName = "WindowClass";\n    wc.hIcon         = LoadIcon(NULL, IDI_APPLICATION); //Loads the standard system icon, change it to a resource for a custom one\n    wc.hIconSm       = LoadIcon(NULL, IDI_APPLICATION);\n\n    if (!RegisterClassEx(&wc)) {\n        //Create a error msgbox if window registration fails\n        MessageBox(NULL, "ERROR: Window Creation Failed", "ERROR", MB_ICONEXCLAMATION | MB_OK);\n        return 0;\n    }\n\n    //Window Location and Dimensions\n    hwnd = CreateWindowEx(WS_EX_CLIENTEDGE, "WindowClass", WINDOW_TITLE, WS_VISIBLE | WS_OVERLAPPEDWINDOW,\n        CW_USEDEFAULT,    //  X         //\n        CW_USEDEFAULT,   //   Y        //\n        WINDOW_WIDTH,   //    WIDTH   //\n        WINDOW_HEIGHT, //     HEIGHT //\n        NULL, NULL, hInstance, NULL\n    );\n\n    if (hwnd == NULL) {\n        //Create a error msgbox if window registration fails\n        MessageBox(NULL, "ERROR: Window Creation Failed", "ERROR", MB_ICONEXCLAMATION | MB_OK);\n        return 0;\n    }\n\n    /*\n        This is the heart of our program where all input is processed and \n        sent to WndProc. Note that GetMessage blocks code flow until it receives something, so\n        this loop will not produce unreasonably high CPU usage\n    */\n    while(GetMessage(&msg, NULL, 0, 0) > 0) { /* If no error is received... */\n        TranslateMessage(&msg); /* Translate key codes to chars if present */\n        DispatchMessage(&msg); /* Send it to WndProc */\n    }\n    return msg.wParam;\n\n}\n`,
    main_h: `#pragma once\n\n#include <iostream>\n#include <Windows.h>\n#include "config.h"\n#include "types.h"\n\n#define WM_SETFONT                      0x0030\n#define ID_BUTTON 1\n`,
    config_h: `#pragma once\n\n//Don't touch this line\n#define WIN_SUBSYSTEM\n\n\n//Window Creation Config\n#define WINDOW_TITLE            "Shadow Engine"\n\n#define WINDOW_WIDTH            800\n#define WINDOW_HEIGHT           450\n\n//File info\n\n#define RC_FILEVERSION          1,0,0,0\n#define RC_PRODUCTVERSION       1,0,0,0\n\n#define RC_COMPANYNAME          "77Z"\n#define RC_FILEVERSIONPRETTY    "1.0.0.0"\n#define RC_FILEDESCRIPTION      "Shadow Engine"\n#define RC_INTERNALNAME         "Shadow"\n#define RC_LEGALCOPYRIGHT       "�77Z"             //symbols might be corrupted :/\n#define RC_LEGALTRADEMARKS      "77Z�"             //symbols might be corrupted :/\n#define RC_ORIGINALFILENAME     "ShadowEngine.exe"\n#define RC_PRODUCTNAME          "Shadow Engine"\n#define RC_PRODUCTVERSIONPRETTY "1.0.0.0"\n\n`,
    resource_h: `#pragma once`,
    resources_rc: `#include "resource.h"\n#include <windows.h>\n#include "config.h"\n\nA ICON "Shadow.ico"\n\n1 VERSIONINFO\nFILEVERSION RC_FILEVERSION\nPRODUCTVERSION RC_PRODUCTVERSION\nFILETYPE VFT_APP\n{\n    BLOCK "StringFileInfo"\n    {\n        BLOCK "040904E4"\n        {\n            VALUE "CompanyName", RC_COMPANYNAME\n            VALUE "FileVersion", RC_FILEVERSIONPRETTY\n            VALUE "FileDescription", RC_FILEDESCRIPTION\n            VALUE "InternalName", RC_INTERNALNAME\n            VALUE "LegalCopyright", RC_LEGALCOPYRIGHT\n            VALUE "LegalTrademarks", RC_LEGALTRADEMARKS\n            VALUE "OriginalFilename", RC_ORIGINALFILENAME\n            VALUE "ProductName", RC_PRODUCTNAME\n            VALUE "ProductVersion", RC_PRODUCTVERSIONPRETTY\n        }\n    }\n    BLOCK "VarFileInfo"\n    {\n        VALUE "Translation", 0x0409, 1252\n    }\n}\n`,
    types_h: `#pragma once\n\n#define TRUE  1\n#define FALSE 0\n`,
    test_bat: `@echo off\n\necho making...\nwindres resources.rc res.o\ng++ -Wl,-subsystem,windows -o out.exe res.o main.cpp\necho cleaning...\ndel res.o\necho running...\nout.exe\n`
}